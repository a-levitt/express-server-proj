{
	"info": {
		"_postman_id": "8e907088-c6e2-41c4-b1bb-0d750d5c6d54",
		"name": "JokeAPI",
		"description": "A public API to deliver joy to the world!",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34917348"
	},
	"item": [
		{
			"name": "Random Joke",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Localhost}}/random/",
					"host": [
						"{{Localhost}}"
					],
					"path": [
						"random",
						""
					]
				},
				"description": "Get a random joke from the Joke API"
			},
			"response": []
		},
		{
			"name": "Specific Joke",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Localhost}}/jokes/:id",
					"host": [
						"{{Localhost}}"
					],
					"path": [
						"jokes",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "200"
						}
					]
				},
				"description": "Responds with a single joke with the requested joke id.\n\nProvide the joke id as a path parameter."
			},
			"response": []
		},
		{
			"name": "Filtered Joke By Type",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Localhost}}/filter?type=Puns",
					"host": [
						"{{Localhost}}"
					],
					"path": [
						"filter"
					],
					"query": [
						{
							"key": "type",
							"value": "Puns"
						}
					]
				},
				"description": "Filters all the jokes by their joke type.\n\nProvide a query parameter for `type` and if the type exists, then you should get back all the jokes that match that type."
			},
			"response": []
		},
		{
			"name": "New Joke",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "text",
							"value": "Iamonthemoonandthereisnowheretogetabeer. Thereisnospacebar.",
							"type": "text"
						},
						{
							"key": "type",
							"value": "Science",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{Localhost}}/jokes",
					"host": [
						"{{Localhost}}"
					],
					"path": [
						"jokes"
					]
				},
				"description": "Create a new joke to add into the bank of jokes.\n\nNeed to provide body parameters for `text` and `type`.\n\nJoke ID will be autogenerated."
			},
			"response": []
		},
		{
			"name": "Replace Joke",
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "text",
							"value": "Why did the scarecrow win a prize? Because he was outstanding in his field.",
							"type": "text"
						},
						{
							"key": "type",
							"value": "Science",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{Localhost}}/jokes/:id",
					"host": [
						"{{Localhost}}"
					],
					"path": [
						"jokes",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "2"
						}
					]
				},
				"description": "Completely replace a joke based on the path parameter id specified.\n\nProvide the replacement values for the `text` and `type`."
			},
			"response": []
		},
		{
			"name": "Edit Joke",
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "type",
							"value": "Agriculture",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{Localhost}}/jokes/:id",
					"host": [
						"{{Localhost}}"
					],
					"path": [
						"jokes",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "2"
						}
					]
				},
				"description": "Edit a joke for the id that is specified in the path parameter.\n\nProvide optional values for either the `text` or the `type`."
			},
			"response": []
		},
		{
			"name": "A Joke",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{Localhost}}/jokes/:id",
					"host": [
						"{{Localhost}}"
					],
					"path": [
						"jokes",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "2"
						}
					]
				},
				"description": "Delete a joke rfom the bank of jokes based on the path parameter provided for the joke `id`.\n\nWill return an error if no jokes match the provided `id`."
			},
			"response": []
		},
		{
			"name": "All Jokes",
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "4VGP2DN-6EWM4SJ-N6FGRHV-Z3PR3TT",
							"type": "string"
						},
						{
							"key": "in",
							"value": "query",
							"type": "string"
						},
						{
							"key": "key",
							"value": "key",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{Localhost}}/all",
					"host": [
						"{{Localhost}}"
					],
					"path": [
						"all"
					]
				},
				"description": "Delete all jokes in the bank.\n\nDANGER.\n\nAuthentication:\n\nRequires an API Key to perform this action."
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "Localhost",
			"value": "http://localhost:3000"
		}
	]
}